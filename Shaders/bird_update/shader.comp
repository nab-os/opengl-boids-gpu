#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D bird_positions;
layout(rgba32f, binding = 1) uniform image2D bird_movements;
layout(rgba32f, binding = 2) uniform image2D bird_final;

uniform int bird_size;

vec2 rotate(vec2 v, float angle) {
    float s = sin(angle);
    float c = cos(angle);

    return mat2(c, -s,
                s,  c) * v;
}

void main() {
    ivec2 position = ivec2(gl_GlobalInvocationID.xy);
    vec2 bird_position = imageLoad(bird_positions, position).xy;
    vec2 bird_movement = imageLoad(bird_movements, position).xy;

    float speed_limit = 0.0020;
    if (length(bird_movement) > speed_limit) {
        bird_movement = normalize(bird_movement) * speed_limit;
    }

    bird_position += bird_movement;

    float speed_boost = 1;
    if (bird_position.x < 0) {
        bird_movement = reflect(bird_movement, vec2(1, 0)) * speed_boost;
    } else if (bird_position.x > 1) {
        bird_movement = reflect(bird_movement, vec2(-1, 0)) * speed_boost;
    }
    if (bird_position.y < 0) {
        bird_movement = reflect(bird_movement, vec2(0, 1)) * speed_boost;
    } else if (bird_position.y > 1) {
        bird_movement = reflect(bird_movement, vec2(0, -1)) * speed_boost;
    }

    imageStore(bird_positions, position, vec4(bird_position, 0.5, 1));
    imageStore(bird_movements, position, vec4(bird_movement, 0.5, 1));

    ivec2 screen_position = ivec2(bird_position.x * 1920.0, bird_position.y * 1080.0);
    imageStore(bird_final, screen_position, vec4(bird_position, 0.5, 1));
}
