#version 430
layout(local_size_x = 1, local_size_y = 1) in;

layout(std430, binding = 0) buffer PositionBuffer {
    vec2 positions[];
};

layout(std430, binding = 1) buffer MovementBuffer {
    vec2 movements[];
};
layout(rgba32f, binding = 2) uniform image2D center_heatmap;
layout(rgba32f, binding = 3) uniform image2D repel_heatmap;

void main() {
    ivec2 grid_size = ivec2(1920, 1080);

    vec2 bird_position = positions[gl_GlobalInvocationID.x];
    vec2 bird_movement = movements[gl_GlobalInvocationID.x];

    vec2 bird_position_screen_space = bird_position * vec2(1920.0, 1080.0);
    vec2 mean_position = imageLoad(center_heatmap, ivec2(bird_position_screen_space)).xy;
    vec2 mean_movement = vec2(0);
    vec2 mean_repel = imageLoad(repel_heatmap, ivec2(bird_position_screen_space)).xy;

    vec2 move_to_center = (mean_position) * 0.0004;
    vec2 move_to_real_center = (vec2(0.5)-bird_position) * 0.0004;
    vec2 repel_movement = (mean_repel) * 0.01;
    vec2 align_movement = (mean_movement) * 0.08;

    bird_movement += move_to_real_center;
    bird_movement += repel_movement;

    float speed_limit = 5 / 1920.0;
    if (length(bird_movement) > speed_limit) {
        bird_movement = normalize(bird_movement) * speed_limit;
    }

    bird_position += bird_movement;

    float speed_boost = 1;
    if (bird_position.x < 0) {
        bird_position.x = 0;
        bird_movement = reflect(bird_movement, vec2(1, 0)) * speed_boost;
    } else if (bird_position.x > 1) {
        bird_position.x = 1;
        bird_movement = reflect(bird_movement, vec2(-1, 0)) * speed_boost;
    }
    if (bird_position.y < 0) {
        bird_position.y = 0;
        bird_movement = reflect(bird_movement, vec2(0, 1)) * speed_boost;
    } else if (bird_position.y > 1) {
        bird_position.y = 1;
        bird_movement = reflect(bird_movement, vec2(0, -1)) * speed_boost;
    }

    positions[gl_GlobalInvocationID.x] = bird_position;
    movements[gl_GlobalInvocationID.x] = bird_movement;
}
