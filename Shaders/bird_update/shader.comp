#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D bird_movements;
layout(rgba32f, binding = 1) uniform image2D bird_movements_next;

void main() {
    ivec2 grid_size = ivec2(1919, 1079);

    ivec2 position = ivec2(gl_GlobalInvocationID.xy);
    vec4 bird_infos = imageLoad(bird_movements, position);
    bool exists = bird_infos.z > 0;
    if (exists) {
        vec2 bird_movement = bird_infos.xy;

        int visual_range = 30;
        int repel_distance = 8;

        vec2 mean_position = vec2(0);
        vec2 mean_movement = vec2(0);
        vec2 mean_repel = vec2(0);
        int birds_seen = 0;
        int birds_too_close = 0;
        for (int x = position.x-visual_range; x < position.x+visual_range; x++) {
            for (int y = position.y-visual_range; y < position.y+visual_range; y++) {
                ivec2 temp_position = ivec2(x, y);
                vec4 temp_infos = imageLoad(bird_movements, temp_position);
                bool exists = temp_infos.z > 0;
                if (exists) {
                    vec2 temp_movement = temp_infos.xy;
                    mean_position += temp_position;
                    mean_movement += temp_movement;
                    birds_seen++;
                    if (distance(position, temp_position) < repel_distance) {
                        mean_repel += position - temp_position;
                        birds_too_close++;
                    }
                }
            }
        }
        mean_position /= birds_seen;
        mean_movement /= birds_seen;
        vec2 move_to_center = (mean_position - position) * 0.004;
        vec2 repel_movement = (mean_repel) * 0.01;
        vec2 align_movement = (mean_movement) * 0.08;

        if (birds_seen > 1) {
            bird_movement += move_to_center + align_movement;
        }
        if (birds_too_close > 1) {
            bird_movement += repel_movement;
        }

        float speed_limit = 5;
        if (length(bird_movement) > speed_limit) {
            bird_movement = normalize(bird_movement) * speed_limit;
        }

        position += ivec2(bird_movement);

        float speed_boost = 2;
        if (position.x < 0) {
            position.x = 0;
            bird_movement = reflect(bird_movement, vec2(1, 0)) * speed_boost;
        } else if (position.x > grid_size.x) {
            position.x = grid_size.x-1;
            bird_movement = reflect(bird_movement, vec2(-1, 0)) * speed_boost;
        }
        if (position.y < 0) {
            position.y = 0;
            bird_movement = reflect(bird_movement, vec2(0, 1)) * speed_boost;
        } else if (position.y > grid_size.y) {
            position.y = grid_size.y-1;
            bird_movement = reflect(bird_movement, vec2(0, -1)) * speed_boost;
        }

        if (imageLoad(bird_movements, position).z > 0 && imageLoad(bird_movements_next, position).z > 0) {
        } else {
            imageStore(bird_movements_next, position, vec4(bird_movement, 1, 1));
        }


    }
}
